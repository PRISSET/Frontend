'use client'

import { useState, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import WeatherWidget from '../../components/WeatherWidget'

interface User {
  id: string
  name: string
  email: string
  avatar?: string
}

interface Bookmark {
  id: number
  title: string
  url: string
  created_at: string
}

export default function Profile() {
  const [user, setUser] = useState<User | null>(null)
  const [loading, setLoading] = useState(true)
  const [uploading, setUploading] = useState(false)
  const [error, setError] = useState('')
  const [success, setSuccess] = useState('')
  const [currentCity, setCurrentCity] = useState('')
  const [weather, setWeather] = useState<any>(null)
  const [weatherLoading, setWeatherLoading] = useState(false)
  const [weatherError, setWeatherError] = useState('')
  const [bookmarks, setBookmarks] = useState<Bookmark[]>([])
  const [newBookmark, setNewBookmark] = useState({ title: '', url: '' })
  const router = useRouter()

  useEffect(() => {
    const token = localStorage.getItem('token')
    if (!token) {
      router.push('/')
      return
    }

    loadUserData()
    loadWeatherSettings()
    loadBookmarks()
  }, [])

  const loadUserData = async () => {
    try {
      const token = localStorage.getItem('token')
      const response = await fetch('http://localhost:3001/api/user/profile', {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      })
      
      if (response.ok) {
        const userData = await response.json()
        setUser(userData)
        localStorage.setItem('user', JSON.stringify(userData))
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error)
    } finally {
      setLoading(false)
    }
  }

  const loadWeatherSettings = async () => {
    try {
      const token = localStorage.getItem('token')
      const response = await fetch('http://localhost:3001/api/weather/settings', {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      })
      
      if (response.ok) {
        const data = await response.json()
        if (data.city) {
          setCurrentCity(data.city)
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–≥–æ–¥—ã:', error)
    }
  }

  const loadBookmarks = async () => {
    try {
      const token = localStorage.getItem('token')
      const response = await fetch('http://localhost:3001/api/bookmarks', {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      })
      
      if (response.ok) {
        const data = await response.json()
        setBookmarks(data.bookmarks)
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–ª–∞–¥–æ–∫:', error)
    }
  }

  const handleAvatarUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0]
    if (!file) return

    setUploading(true)
    setError('')
    setSuccess('')

    const formData = new FormData()
    formData.append('avatar', file)

    try {
      const token = localStorage.getItem('token')
      const response = await fetch('http://localhost:3001/api/user/avatar', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`
        },
        body: formData,
      })

      const data = await response.json()

      if (response.ok) {
        setUser(prev => prev ? { ...prev, avatar: data.avatarUrl } : null)
        localStorage.setItem('user', JSON.stringify({ ...user, avatar: data.avatarUrl }))
        setSuccess('–ê–≤–∞—Ç–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω')
      } else {
        setError(data.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞')
      }
    } catch (error) {
      setError('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º')
    } finally {
      setUploading(false)
    }
  }

  const handleLogout = () => {
    localStorage.removeItem('token')
    localStorage.removeItem('user')
    router.push('/')
  }

  const getWeather = async () => {
    if (!currentCity.trim()) {
      setWeatherError('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞')
      return
    }
    
    setWeatherLoading(true)
    setWeatherError('')
    
    try {
      const response = await fetch(
        `https://wttr.in/${encodeURIComponent(currentCity)}?format=j1&lang=ru`
      )
      
      if (response.ok) {
        const data = await response.json()
        
        const forecast = data.weather.slice(0, 7).map((day: any, index: number) => {
          const date = new Date()
          date.setDate(date.getDate() + index)
          
          return {
            date: index === 0 ? '–°–µ–≥–æ–¥–Ω—è' : date.toLocaleDateString('ru-RU', { 
              weekday: 'short', 
              day: 'numeric', 
              month: 'short' 
            }),
            temp: Math.round(day.maxtempC),
            description: day.hourly[0]?.lang_ru?.[0]?.value || day.hourly[0]?.weatherDesc?.[0]?.value || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
            icon: getWeatherIcon(day.hourly[0]?.weatherCode || '113')
          }
        })
        
        setWeather({
          city: data.nearest_area?.[0]?.areaName?.[0]?.value || currentCity,
          forecast
        })
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ä–æ–¥ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await saveWeatherCity(currentCity)
      } else {
        setWeatherError('–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω')
      }
    } catch (error) {
      setWeatherError('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ')
    } finally {
      setWeatherLoading(false)
    }
  }

  const saveWeatherCity = async (city: string) => {
    try {
      const token = localStorage.getItem('token')
      await fetch('http://localhost:3001/api/weather/settings', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({ city })
      })
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞:', error)
    }
  }

  const getWeatherIcon = (code: string) => {
    const iconMap: { [key: string]: string } = {
      '113': '‚òÄÔ∏è', '116': '‚õÖ', '119': '‚òÅÔ∏è', '122': '‚òÅÔ∏è',
      '143': 'üå´Ô∏è', '176': 'üå¶Ô∏è', '179': 'üå®Ô∏è', '200': '‚õàÔ∏è',
      '227': 'üå®Ô∏è', '230': '‚ùÑÔ∏è', '248': 'üå´Ô∏è', '260': 'üå´Ô∏è',
      '263': 'üå¶Ô∏è', '266': 'üåßÔ∏è', '281': 'üåßÔ∏è', '284': 'üåßÔ∏è',
      '293': 'üå¶Ô∏è', '296': 'üåßÔ∏è', '299': 'üåßÔ∏è', '302': 'üåßÔ∏è',
      '305': 'üåßÔ∏è', '308': 'üåßÔ∏è', '311': 'üåßÔ∏è', '314': 'üåßÔ∏è',
      '317': 'üåßÔ∏è', '320': 'üå®Ô∏è', '323': 'üå®Ô∏è', '326': 'üå®Ô∏è',
      '329': '‚ùÑÔ∏è', '332': '‚ùÑÔ∏è', '335': '‚ùÑÔ∏è', '338': '‚ùÑÔ∏è',
      '350': 'üåßÔ∏è', '353': 'üå¶Ô∏è', '356': 'üåßÔ∏è', '359': 'üåßÔ∏è',
      '362': 'üå®Ô∏è', '365': 'üå®Ô∏è', '368': 'üå®Ô∏è', '371': '‚ùÑÔ∏è',
      '374': 'üåßÔ∏è', '377': 'üåßÔ∏è', '386': '‚õàÔ∏è', '389': '‚õàÔ∏è',
      '392': '‚õàÔ∏è', '395': '‚ùÑÔ∏è'
    }
    return iconMap[code] || 'üå§Ô∏è'
   }

   const addBookmark = async () => {
     if (!newBookmark.title.trim() || !newBookmark.url.trim()) return
     
     try {
       const token = localStorage.getItem('token')
       const response = await fetch('http://localhost:3001/api/bookmarks', {
         method: 'POST',
         headers: {
           'Content-Type': 'application/json',
           'Authorization': `Bearer ${token}`
         },
         body: JSON.stringify({
           title: newBookmark.title.trim(),
           url: newBookmark.url.trim()
         })
       })
       
       if (response.ok) {
         const data = await response.json()
         setBookmarks(prev => [data.bookmark, ...prev])
         setNewBookmark({ title: '', url: '' })
         setSuccess('–ó–∞–∫–ª–∞–¥–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞')
       } else {
         const errorData = await response.json()
         setError(errorData.message || '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–ª–∞–¥–∫–∏')
       }
     } catch (error) {
       setError('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º')
     }
   }

   const removeBookmark = async (bookmarkId: number) => {
     try {
       const token = localStorage.getItem('token')
       const response = await fetch(`http://localhost:3001/api/bookmarks/${bookmarkId}`, {
         method: 'DELETE',
         headers: {
           'Authorization': `Bearer ${token}`
         }
       })
       
       if (response.ok) {
         setBookmarks(prev => prev.filter(bookmark => bookmark.id !== bookmarkId))
         setSuccess('–ó–∞–∫–ª–∞–¥–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞')
       } else {
         const errorData = await response.json()
         setError(errorData.message || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–ª–∞–¥–∫–∏')
       }
     } catch (error) {
       setError('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º')
     }
   }

  if (loading) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="text-xl">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
      </div>
    )
  }

  if (!user) {
    return (
      <div className="text-center">
        <p className="text-xl text-red-600">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω</p>
      </div>
    )
  }

  return (
    <div className="max-w-2xl mx-auto">
      <div className="card max-w-4xl mx-auto">
        <h1 className="text-3xl font-bold text-white mb-12 text-center">
          –õ–∏—á–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
        </h1>
        
        {error && (
          <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-6">
            {error}
          </div>
        )}
        
        {success && (
          <div className="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded mb-6">
            {success}
          </div>
        )}
        
        {/* –°–µ–∫—Ü–∏—è –∞–≤–∞—Ç–∞—Ä–∞ */}
        <div className="bg-white/5 rounded-2xl p-8 mb-8">
          <h2 className="text-xl font-semibold text-white mb-8 text-center">–§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è</h2>
          <div className="flex flex-col items-center">
            <div className="w-24 h-24 rounded-full overflow-hidden bg-gray-200 mb-8 shadow-lg">
              {user.avatar ? (
                <img 
                  src={`http://localhost:3001${user.avatar}`} 
                  alt="Avatar" 
                  className="avatar-image"
                />
              ) : (
                <div className="w-full h-full flex items-center justify-center text-gray-500">
                  <div className="w-10 h-10 bg-gray-400 rounded-full"></div>
                </div>
              )}
            </div>
            
            <div className="mt-6">
              <label className="btn-secondary cursor-pointer px-10 py-3 text-sm font-medium hover:bg-white/20 transition-all duration-200 shadow-lg inline-flex items-center space-x-2">
                {uploading ? (
                  <>
                    <div className="w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin"></div>
                    <span>–ó–∞–≥—Ä—É–∑–∫–∞...</span>
                  </>
                ) : (
                  <>
                    <span>üì∑</span>
                    <span>–ò–∑–º–µ–Ω–∏—Ç—å –∞–≤–∞—Ç–∞—Ä</span>
                  </>
                )}
                <input
                  type="file"
                  accept="image/*"
                  onChange={handleAvatarUpload}
                  className="hidden"
                  disabled={uploading}
                />
              </label>
            </div>
          </div>
        </div>
        
        {/* –°–µ–∫—Ü–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
        <div className="bg-white/5 rounded-2xl p-8 mb-8">
          <h2 className="text-xl font-semibold text-white mb-8 text-center">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—è</h2>
          <div className="space-y-6 max-w-md mx-auto">
            <div>
              <label className="block text-white/80 text-sm font-semibold mb-3">
                –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
              </label>
              <div className="input-field bg-white/10 text-white font-medium">
                {user.name}
              </div>
            </div>
            
            <div>
              <label className="block text-white/80 text-sm font-semibold mb-3">
                –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞
              </label>
              <div className="input-field bg-white/10 text-white font-medium">
                {user.email}
              </div>
            </div>
          </div>
        </div>
        
        {/* –°–µ–∫—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π */}
        <div className="space-y-8">
          {/* –ü–æ–≥–æ–¥–∞ */}
          <div className="bg-white/5 rounded-2xl p-8">
            <h2 className="text-xl font-semibold text-white mb-8 text-center">–ü–æ–≥–æ–¥–∞</h2>
            <div className="max-w-md mx-auto space-y-4">
              <div>
                <label className="block text-white/80 text-sm font-semibold mb-3">–¢–µ–∫—É—â–∏–π –≥–æ—Ä–æ–¥</label>
                <input
                  type="text"
                  value={currentCity}
                  onChange={(e) => {
                    setCurrentCity(e.target.value)
                    localStorage.setItem('currentCity', e.target.value)
                  }}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞"
                  className="input-field w-full mb-4"
                  onKeyPress={(e) => e.key === 'Enter' && getWeather()}
                />
              </div>
              <button
                onClick={getWeather}
                disabled={weatherLoading || !currentCity.trim()}
                className="btn-secondary w-full py-3 mt-4"
              >
                {weatherLoading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–≥–æ–¥—É'}
              </button>
              {weatherError && (
                <div className="text-red-400 text-sm text-center bg-red-500/10 p-3 rounded-lg mt-4">
                  {weatherError}
                </div>
              )}
            </div>
          </div>
          
          {/* –ó–∞–∫–ª–∞–¥–∫–∏ */}
          <div className="bg-white/5 rounded-2xl p-8">
            <h2 className="text-xl font-semibold text-white mb-8 text-center">–ó–∞–∫–ª–∞–¥–∫–∏</h2>
            <div className="max-w-md mx-auto space-y-6">
              <div>
                <label className="block text-white/80 text-sm font-semibold mb-4">–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–∫–ª–∞–¥–∫—É</label>
                <div className="space-y-4">
                  <input
                    type="text"
                    value={newBookmark.title}
                    onChange={(e) => setNewBookmark(prev => ({ ...prev, title: e.target.value }))}
                    placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–ª–∞–¥–∫–∏"
                    className="input-field w-full"
                  />
                  <div className="flex space-x-3">
                    <input
                      type="url"
                      value={newBookmark.url}
                      onChange={(e) => setNewBookmark(prev => ({ ...prev, url: e.target.value }))}
                      placeholder="https://example.com"
                      className="input-field flex-1"
                      onKeyPress={(e) => e.key === 'Enter' && addBookmark()}
                    />
                    <button
                      onClick={addBookmark}
                      disabled={!newBookmark.title.trim() || !newBookmark.url.trim()}
                      className="btn-secondary px-6 py-3 whitespace-nowrap"
                    >
                      –î–æ–±–∞–≤–∏—Ç—å
                    </button>
                  </div>
                </div>
              </div>
              
              {bookmarks.length > 0 && (
                <div className="mt-8">
                  <label className="block text-white/80 text-sm font-semibold mb-4">–ú–æ–∏ –∑–∞–∫–ª–∞–¥–∫–∏</label>
                  <div className="space-y-3 max-h-48 overflow-y-auto">
                    {bookmarks.map((bookmark) => (
                      <div key={bookmark.id} className="nav-card flex justify-between items-center">
                        <div className="flex-1 min-w-0">
                          <div className="text-white text-sm font-medium truncate">{bookmark.title}</div>
                          <div className="text-white/60 text-xs truncate">
                            {bookmark.url}
                          </div>
                        </div>
                        <button
                          onClick={() => removeBookmark(bookmark.id)}
                          className="text-red-400 hover:text-red-300 text-sm px-3 py-1 rounded-lg hover:bg-red-500/10 transition-colors ml-3 flex-shrink-0"
                          title="–£–¥–∞–ª–∏—Ç—å –∑–∞–∫–ª–∞–¥–∫—É"
                        >
                          ‚úï
                        </button>
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>
          </div>
          
        </div>
        
        {weather && (
          <div className="bg-white/5 rounded-2xl p-8 mt-8">
            <h3 className="text-lg font-semibold mb-6 text-white text-center">
              –ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {weather.city}
            </h3>
            <div className="space-y-3 max-h-80 overflow-y-auto">
              {weather.forecast.map((day: any, index: number) => (
                <div key={index} className="nav-card flex justify-between items-center">
                  <div className="flex items-center space-x-3">
                    <span className="text-xl">{day.icon}</span>
                    <div>
                      <div className="text-white text-sm font-medium">{day.date}</div>
                      <div className="text-white/80 text-xs capitalize">{day.description}</div>
                    </div>
                  </div>
                  <div className="text-white text-sm font-bold">
                    {day.temp}¬∞C
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}
        
        {/* –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞ */}
        <div className="text-center pt-12 mt-10">
          <button
            onClick={handleLogout}
            className="btn-primary px-12 py-4 text-lg font-semibold"
          >
            –í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
          </button>
        </div>
      </div>
    </div>
  )
}